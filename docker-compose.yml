version: "3.8"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.2
    container_name: elasticsearch
    ports:
      - "9400:9200"
      - "9500:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    deploy:
      resources:
        limits:
          memory: 3000m
        reservations:
          memory: 2g
    networks:
      - local_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.2
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - "elasticsearch"
    networks:
      - local_network

  fluentd:
    build: ./fluentd
    container_name: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - elasticsearch
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - local_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:24224"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      elasticsearch:
        condition: service_healthy

  ekf-stack:
    build: ./
    container_name: efk-stack
    ports:
      - "8080:8080"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: "efk-stack"
    links:
      - fluentd
    networks:
      - local_network
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  elasticsearch_data:

networks:
  local_network:
